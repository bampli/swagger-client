# coding: utf-8

"""
    bampli-api

    The API for the Business Amplifier project.  # noqa: E501

    OpenAPI spec version: 1.0.0-oas3
    Contact: josemotta@bampli.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CompanyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_company(self, body, **kwargs):  # noqa: E501
        """Create a new Company  # noqa: E501

        Adds a Company  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_company(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Company body: (required)
        :return: Company
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_company_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_company_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_company_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new Company  # noqa: E501

        Adds a Company  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_company_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Company body: (required)
        :return: Company
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_company" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_company`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTP_BASIC']  # noqa: E501

        return self.api_client.call_api(
            '/company/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Company',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_product(self, body, **kwargs):  # noqa: E501
        """Create a new Product  # noqa: E501

        Adds a Product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_product(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Product body: (required)
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_product_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_product_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_product_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new Product  # noqa: E501

        Adds a Product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_product_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Product body: (required)
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTP_BASIC']  # noqa: E501

        return self.api_client.call_api(
            '/product/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_company(self, companyid, **kwargs):  # noqa: E501
        """Delete a Company  # noqa: E501

        Deletes a Company  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_company(companyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str companyid: Identifier of the Company (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_company_with_http_info(companyid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_company_with_http_info(companyid, **kwargs)  # noqa: E501
            return data

    def delete_company_with_http_info(self, companyid, **kwargs):  # noqa: E501
        """Delete a Company  # noqa: E501

        Deletes a Company  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_company_with_http_info(companyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str companyid: Identifier of the Company (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['companyid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_company" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'companyid' is set
        if ('companyid' not in params or
                params['companyid'] is None):
            raise ValueError("Missing the required parameter `companyid` when calling `delete_company`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'companyid' in params:
            path_params['companyid'] = params['companyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['HTTP_BASIC']  # noqa: E501

        return self.api_client.call_api(
            '/company/{companyid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_product(self, productid, **kwargs):  # noqa: E501
        """Delete a Product  # noqa: E501

        Deletes a Product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_product(productid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str productid: Identifier of the Product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_product_with_http_info(productid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_product_with_http_info(productid, **kwargs)  # noqa: E501
            return data

    def delete_product_with_http_info(self, productid, **kwargs):  # noqa: E501
        """Delete a Product  # noqa: E501

        Deletes a Product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_product_with_http_info(productid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str productid: Identifier of the Product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['productid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'productid' is set
        if ('productid' not in params or
                params['productid'] is None):
            raise ValueError("Missing the required parameter `productid` when calling `delete_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'productid' in params:
            path_params['productid'] = params['productid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['HTTP_BASIC']  # noqa: E501

        return self.api_client.call_api(
            '/product/{productid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_company(self, companyid, **kwargs):  # noqa: E501
        """Load an individual Company  # noqa: E501

        Loads a Company  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_company(companyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str companyid: Identifier of the Company (required)
        :return: Company
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_company_with_http_info(companyid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_company_with_http_info(companyid, **kwargs)  # noqa: E501
            return data

    def get_company_with_http_info(self, companyid, **kwargs):  # noqa: E501
        """Load an individual Company  # noqa: E501

        Loads a Company  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_company_with_http_info(companyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str companyid: Identifier of the Company (required)
        :return: Company
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['companyid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_company" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'companyid' is set
        if ('companyid' not in params or
                params['companyid'] is None):
            raise ValueError("Missing the required parameter `companyid` when calling `get_company`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'companyid' in params:
            path_params['companyid'] = params['companyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/company/{companyid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Company',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_product(self, productid, **kwargs):  # noqa: E501
        """Load an individual Product  # noqa: E501

        Loads a Product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product(productid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str productid: Identifier of the Product (required)
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_product_with_http_info(productid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_product_with_http_info(productid, **kwargs)  # noqa: E501
            return data

    def get_product_with_http_info(self, productid, **kwargs):  # noqa: E501
        """Load an individual Product  # noqa: E501

        Loads a Product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_product_with_http_info(productid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str productid: Identifier of the Product (required)
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['productid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'productid' is set
        if ('productid' not in params or
                params['productid'] is None):
            raise ValueError("Missing the required parameter `productid` when calling `get_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'productid' in params:
            path_params['productid'] = params['productid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/product/{productid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_companies(self, **kwargs):  # noqa: E501
        """Load the list of Companies  # noqa: E501

        Loads list of Companies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_companies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int size: Size of the page to retrieve.
        :param float page: Number of the page to retrieve.
        :param str sort: Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort=name ASC,city DESC
        :param str name: Allows to filter the collections of result by the value of name
        :return: list[Company]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_companies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_companies_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_companies_with_http_info(self, **kwargs):  # noqa: E501
        """Load the list of Companies  # noqa: E501

        Loads list of Companies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_companies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int size: Size of the page to retrieve.
        :param float page: Number of the page to retrieve.
        :param str sort: Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort=name ASC,city DESC
        :param str name: Allows to filter the collections of result by the value of name
        :return: list[Company]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['size', 'page', 'sort', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_companies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'size' in params:
            query_params.append(('$size', params['size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/company/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Company]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_products(self, **kwargs):  # noqa: E501
        """Load the list of Products  # noqa: E501

        Loads list of Products  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_products(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int size: Size of the page to retrieve.
        :param float page: Number of the page to retrieve.
        :param str sort: Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort=name ASC,city DESC
        :param str name: Allows to filter the collections of result by name
        :param str company_id: Allows to filter the collections of result by company_id
        :return: list[Product]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_products_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_products_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_products_with_http_info(self, **kwargs):  # noqa: E501
        """Load the list of Products  # noqa: E501

        Loads list of Products  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_products_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int size: Size of the page to retrieve.
        :param float page: Number of the page to retrieve.
        :param str sort: Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort=name ASC,city DESC
        :param str name: Allows to filter the collections of result by name
        :param str company_id: Allows to filter the collections of result by company_id
        :return: list[Product]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['size', 'page', 'sort', 'name', 'company_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_products" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'size' in params:
            query_params.append(('$size', params['size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('$page', params['page']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('$sort', params['sort']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'company_id' in params:
            query_params.append(('company_id', params['company_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/product/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Product]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_company(self, body, companyid, **kwargs):  # noqa: E501
        """Update a Company  # noqa: E501

        Stores a Company  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_company(body, companyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Company body: (required)
        :param str companyid: Identifier of the Company (required)
        :return: Company
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_company_with_http_info(body, companyid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_company_with_http_info(body, companyid, **kwargs)  # noqa: E501
            return data

    def update_company_with_http_info(self, body, companyid, **kwargs):  # noqa: E501
        """Update a Company  # noqa: E501

        Stores a Company  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_company_with_http_info(body, companyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Company body: (required)
        :param str companyid: Identifier of the Company (required)
        :return: Company
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'companyid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_company" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_company`")  # noqa: E501
        # verify the required parameter 'companyid' is set
        if ('companyid' not in params or
                params['companyid'] is None):
            raise ValueError("Missing the required parameter `companyid` when calling `update_company`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'companyid' in params:
            path_params['companyid'] = params['companyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTP_BASIC']  # noqa: E501

        return self.api_client.call_api(
            '/company/{companyid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Company',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_product(self, body, productid, **kwargs):  # noqa: E501
        """Update a Product  # noqa: E501

        Stores a Product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product(body, productid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Product body: (required)
        :param str productid: Identifier of the Product (required)
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_product_with_http_info(body, productid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_product_with_http_info(body, productid, **kwargs)  # noqa: E501
            return data

    def update_product_with_http_info(self, body, productid, **kwargs):  # noqa: E501
        """Update a Product  # noqa: E501

        Stores a Product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product_with_http_info(body, productid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Product body: (required)
        :param str productid: Identifier of the Product (required)
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'productid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_product`")  # noqa: E501
        # verify the required parameter 'productid' is set
        if ('productid' not in params or
                params['productid'] is None):
            raise ValueError("Missing the required parameter `productid` when calling `update_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'productid' in params:
            path_params['productid'] = params['productid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HTTP_BASIC']  # noqa: E501

        return self.api_client.call_api(
            '/product/{productid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
